# [XY] means "either X or Y" and {X} means "any amino acid except X."
# the N-glycosylation motif is written as N{P}[ST]{P}.

# first: N
# second: NOT P
# third: S OR T
# fourth: NOT P

def isMatch(str_):
    if (str_[0] ) == 'N':
        if (str_[1]) != 'P':
            if (str_[2] == 'S' or str_[2] == 'T'):
                if (str_[3] != 'P'):
                    return True
    return False
    
URLBASE = 'https://www.uniprot.org/uniprot/'
EXT = '.fasta'

import requests
from bs4 import BeautifulSoup

rosalindHash = {}

def readRosalindStr(motif, rosalindString):
    splitString = rosalindString.split('\n')
    seq = ''
    for s in splitString:
        if s[0] != '>':
            seq += s
    rosalindHash[motif] = seq

def main(listMotifs):
    for motif in listMotifs:
        link = URLBASE + motif + EXT
        # print (link)
        f = requests.get(link)
        html = f.content
        soup = BeautifulSoup(html, 'html.parser')
        text = soup.find_all(text=True)[0]
        readRosalindStr(motif, text[:-1])
    
# a string of length n
def matchBool(str_):
    s = ''
    for i in range(len(str_)):
        currentStr = str_[i:i+4]
        if (isMatch(currentStr)):
            # print (currentStr + " " + str(i + 1)) # bio starting count correction
            s += str(i + 1) + ' '
    return s[:-1]
    
def main2():
    for key in rosalindHash:
        # rint (key, "->", rosalindHash[key])
        s = matchBool(rosalindHash[key])
        if s != '':
            locationHash[key] = s
    for key in locationHash:
        print (key)
        print (locationHash[key])
            
# listMotifs = ['B5ZC00', 'P07204_TRBM_HUMAN', 'P20840_SAG1_YEAST']
listMotifs = ['Q1E9Q9', 'P80370_DLK_HUMAN', 'Q7TMB8', 'P02790_HEMO_HUMAN', 'P07204_TRBM_HUMAN', 'P07585_PGS2_HUMAN', 'P17967', 'P27918_PROP_HUMAN', 'P01045_KNH2_BOVIN', 'P40308', 'P28314_PER_COPCI', 'P01878_ALC_MOUSE', 'P01042_KNH_HUMAN']

main(listMotifs)
locationHash = {}
main2()
'''
for key in locationHash:
    print (key)
    print (locationHash[key])
'''
    

str1 = '''MKNKFKTQEELVNHLKTVGFVFANSEIYNGLANAWDYGPLGVLLKNNLKNLWWKEFVTKQKDVVGLDSAIILNPLVWKASGHLDNFSDPLIDCKNCKARYRADKLIESFDENIHIAENSSNEEFAKVLNDYEISCPTCKQFNWTEIRHFNLMFKTYQGVIEDAKNVVYLRPETAQGIFVNFKNVQRSMRLHLPFGIAQIGKSFRNEITPGNFIFRTREFEQMEIEFFLKEESAYDIFDKYLNQIENWLVSACGLSLNNLRKHEHPKEELSHYSKKTIDFEYNFLHGFSELYGIAYRTNYDLSVHMNLSKKDLTYFDEQTKEKYVPHVIEPSVGVERLLYAILTEATFIEKLENDDERILMDLKYDLAPYKIAVMPLVNKLKDKAEEIYGKILDLNISATFDNSGSIGKRYRRQDAIGTIYCLTIDFDSLDDQQDPSFTIRERNSMAQKRIKLSELPLYLNQKAHEDFQRQCQK'''

str2 = '''MLGVLVLGALALAGLGFPAPAEPQPGGSQCVEHDCFALYPGPATFLNASQICDGLRGHLMTVRSSVAADVISLLLNGDGGVGRRRLWIGLQLPPGCGDPKRLGPLRGFQWVTGDNNTSYSRWARLDLNGAPLCGPLCVAVSAAEATVPSEPIWEEQQCEVKADGFLCEFHFPATCRPLAVEPGAAAAAVSITYGTPFAARGADFQALPVGSSAAVAPLGLQLMCTAPPGAVQGHWAREAPGAWDCSVENGGCEHACNAIPGAPRCQCPAGAALQADGRSCTASATQSCNDLCEHFCVPNPDQPGSYSCMCETGYRLAADQHRCEDVDDCILEPSPCPQRCVNTQGGFECHCYPNYDLVDGECVEPVDPCFRANCEYQCQPLNQTSYLCVCAEGFAPIPHEPHRCQMFCNQTACPADCDPNTQASCECPEGYILDDGFICTDIDECENGGFCSGVCHNLPGTFECICGPDSALARHIGTDCDSGKVDGGDSGSGEPPPSPTPGSTLTPPAVGLVHSGLLIGISIASLCLVVALLALLCHLRKKQGAARAKMEYKCAAPSKEVVLQHVRTERTPQRL'''

str3 = '''MFTFLKIILWLFSLALASAININDITFSNLEITPLTANKQPDQGWTATFDFSIADASSIREGDEFTLSMPHVYRIKLLNSSQTATISLADGTEAFKCYVSQQAAYLYENTTFTCTAQNDLSSYNTIDGSITFSLNFSDGGSSYEYELENAKFFKSGPMLVKLGNQMSDVVNFDPAAFTENVFHSGRSTGYGSFESYHLGMYCPNGYFLGGTEKIDYDSSNNNVDLDCSSVQVYSSNDFNDWWFPQSYNDTNADVTCFGSNLWITLDEKLYDGEMLWVNALQSLPANVNTIDHALEFQYTCLDTIANTTYATQFSTTREFIVYQGRNLGTASAKSSFISTTTTDLTSINTSAYSTGSISTVETGNRTTSEVISHVVTTSTKLSPTATTSLTIAQTSIYSTDSNITVGTDIHTTSEVISDVETISRETASTVVAAPTSTTGWTGAMNTYISQFTSSSFATINSTPIISSSAVFETSDASIVNVHTENITNTAAVPSEEPTFVNATRNSLNSFCSSKQPSSPSSYTSSPLVSSLSVSKTLLSTSFTPSVPTSNTYIKTKNTGYFEHTALTTSSVGLNSFSETAVSSQGTKIDTFLVSSLIAYPSSASGSQLSGIQQNFTSTSLMISTYEGKASIFFSAELGSIIFLLLSYLLF'''


'''

print (isMatch('NFSD'))
print (isMatch('NSSN'))

matchBool(str1)
matchBool(str2)
matchBool(str3)

'''
